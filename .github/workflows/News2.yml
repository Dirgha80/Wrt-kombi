# =====================================================================================
# https://github.com/ophub/amlogic-s9xxx-openwrt
# Description:      Build OpenWrt with Image Builder
# Instructions:     https://openwrt.org/docs/guide-user/additional-software/imagebuilder
# Download from:    https://downloads.openwrt.org/releases
#                   https://downloads.immortalwrt.org/releases
# =====================================================================================

name: Build sdcard+via url+tunell+files new

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      releases_branch:
        description: "Select the releases branch"
        required: false
        default: "openwrt:24.10.2"
        type: choice
        options:
          - immortalwrt:24.10.1
          - immortalwrt:24.10.2
          - immortalwrt:23.05.4
          - openwrt:24.10.2
          - openwrt:24.10.1
          - openwrt:23.05.5
          - openwrt:23.05.6
      target:
        description: "Select device Target"
        required: true
        default: "Amlogic AT01"
        type: choice
        options:
          - all
          - Raspberry Pi 3B
          - Raspberry Pi 4B
          - NanoPi R2C
          - NanoPi R2S
          - NanoPi R4S
          - Orange Pi R1 Plus
          - Orange Pi R1 Plus LTS
          - x86-64
          - Amlogic HG680P
          - Amlogic B860H-V5
          - Amlogic B860H-V1-V2
          - Amlogic AT01
          - Amlogic HG680-FJ
          - Amlogic AT01_Amlogic HG680P
      rootfs_size:
        description: "ROOTFS Size, (512, 640, 756, 1024)"
        required: true
        default: "1024"
      openwrt_kernel:
        description: "Select kernel version"
        required: false
        default: "6.6.y_6.12.y"
        type: choice
        options:
          - 5.4.y
          - 5.10.y
          - 5.15.y
          - 6.1.y
          - 6.6.y
          - 6.12.y
          - 6.1.y_6.6.y
          - 5.15.y_5.10.y
          - 6.6.y_6.12.y
      kernel_usage:
        description: "Set the tags of the stable kernel."
        required: false
        default: "stable"
        type: choice
        options:
          - stable
          - flippy
          - dev
          - s905x4
      upload-prerelease:
        description: "Upload as pre-release"
        required: false
        default: "false"
        type: boolean
      fwinfo:
        description: 'Firmware Information'
        required: false
        default: "imagebuilderC.sh"
        type: choice
        options:
          - imagebuilder.sh
          - imagebuilderA.sh
          - imagebuilderB.sh
          - imagebuilderC.sh
          - imagebuilderD.sh
      rootfs_url:
        description: "Optional: Download ROOTFS archive from URL"
        required: false
        default: ""
      type_file:
        description: "Select type file"
        required: false
        default: "img.gz"
        type: choice
        options:
          - img.xz
          - img.gz
          - tar.gz
      tunnel_option:
        description: "Select tunnel packages to include"
        required: false
        default: "openclash"
        type: choice
        options:
          - ""
          - openclash
          - passwall
          - nikki
          - openclash-passwall
          - nikki-passwall
          - nikki-openclash
          - all-tunnel

env:
  TZ: Asia/Jakarta
  IMAGEBUILDER_SCRIPT: ${{ inputs.fwinfo }}
  TUNNEL_OPTION: ${{ inputs.tunnel_option }}
  WORKING_DIR: imagebuilder
  DOWNLOAD_URL: "https://tes-rep.github.io/Server-repo/"
  
jobs:
  prebuild:
    runs-on: ubuntu-latest
    name: ${{ inputs.releases_branch }}
    outputs:
      target: ${{ steps.set-matrix.outputs.target }}
    steps:
      - name: Set Matrix Run
        id: set-matrix
        run: |
          if [ "${{ inputs.target }}" == "all" ]; then
            echo "target=['Raspberry Pi 3B','Raspberry Pi 4B','NanoPi R2C','NanoPi R2S','NanoPi R4S','Orange Pi R1 Plus','Orange Pi R1 Plus LTS','x86-64','Amlogic HG680P','Amlogic B860H-V5','Amlogic AT01','Amlogic B860H-V1-V2']" >> $GITHUB_OUTPUT
          elif [ "${{ inputs.target }}" == "Amlogic AT01_Amlogic HG680P" ]; then
            echo "target=['Amlogic AT01','Amlogic HG680P']" >> $GITHUB_OUTPUT
          else
            echo "target=['${{ inputs.target }}']" >> $GITHUB_OUTPUT
          fi
  
  build:
    needs: prebuild
    runs-on: ubuntu-24.04
    if: ${{ github.event.repository.owner.id }} == ${{ github.event.sender.id }}
    name: "Build ${{ matrix.target }}"
    strategy:
      fail-fast: false
      matrix:
        target: ${{fromJSON(needs.prebuild.outputs.target)}}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Notify Start Build
        run: |
          DATE=$(date +"%Y-%m-%d %H:%M:%S")
          MESSAGE="🚀 Build firmware hj-Wrt dimulai...
          ═══════════════════════
          🇲🇨 dev     : **houjie80**
          📦 Target   : **${{ matrix.target }}**
          🌐 Release  : **${{ inputs.releases_branch }}**
          🖥 Kernel   : **${{ inputs.openwrt_kernel }}**
          ⏰ Tanggal  : **$DATE**"
          
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
          -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
          -d parse_mode="HTML" \
          --data-urlencode text="$MESSAGE"

      - name: Initialization Environment
        run: |
          sudo apt-get -qq update
          sudo apt-get -qq install build-essential libncurses5-dev libncursesw5-dev zlib1g-dev gawk git gettext libssl-dev xsltproc rsync wget unzip tar gzip qemu-utils mkisofs jq python3 python3-pip
          sudo pip3 install gdown mediafire-dl git+https://github.com/Juvenal-Yescas/mediafire-dl
          wget https://mega.nz/linux/repo/xUbuntu_24.04/amd64/megacmd-xUbuntu_24.04_amd64.deb && sudo apt install "$PWD/megacmd-xUbuntu_24.04_amd64.deb"
          sudo timedatectl set-timezone "$TZ"

          echo "BUILD_TARGET=${{ matrix.target }}" >> $GITHUB_ENV
          echo "BUILD_DATE=$(date +'%Y-%m-%d')" >> $GITHUB_ENV
          echo "TAG_DATE=$(date +'%Y%m%d')" >> $GITHUB_ENV

          case "${{ matrix.target }}" in
              "Raspberry Pi 3B")    echo "TARGET_NAME=rpi-3" >> $GITHUB_ENV ;;
              "Raspberry Pi 4B")    echo "TARGET_NAME=rpi-4" >> $GITHUB_ENV ;;
              "NanoPi R2C")         echo "TARGET_NAME=friendlyarm_nanopi-r2c" >> $GITHUB_ENV ;;
              "NanoPi R2S")         echo "TARGET_NAME=friendlyarm_nanopi-r2s" >> $GITHUB_ENV ;;
              "NanoPi R4S")         echo "TARGET_NAME=friendlyarm_nanopi-r4s" >> $GITHUB_ENV ;;
              "Orange Pi R1 Plus")  echo "TARGET_NAME=xunlong_orangepi-r1-plus" >> $GITHUB_ENV ;;
              "Orange Pi R1 Plus LTS") echo "TARGET_NAME=xunlong_orangepi-r1-plus-lts" >> $GITHUB_ENV ;;
              "x86-64")             echo "TARGET_NAME=generic" >> $GITHUB_ENV ;;
              "Amlogic HG680P")     echo "TARGET_NAME=amlogic" >> $GITHUB_ENV ; echo "OPENWRT_BOARD=s905x" >> $GITHUB_ENV ;;
              "Amlogic B860H-V5")   echo "TARGET_NAME=amlogic" >> $GITHUB_ENV ; echo "OPENWRT_BOARD=s905x2-b860h-v5" >> $GITHUB_ENV ;;
              "Amlogic B860H-V1-V2") echo "TARGET_NAME=amlogic" >> $GITHUB_ENV ; echo "OPENWRT_BOARD=s905x2" >> $GITHUB_ENV ;;
              "Amlogic AT01")       echo "TARGET_NAME=amlogic" >> $GITHUB_ENV ; echo "OPENWRT_BOARD=s905x4-advan" >> $GITHUB_ENV ;;
              "Amlogic HG680-FJ")   echo "TARGET_NAME=amlogic" >> $GITHUB_ENV ; echo "OPENWRT_BOARD=s905x2-hg680-fj" >> $GITHUB_ENV ;;
          esac
          
          echo "RELEASE_TAG=${{ inputs.releases_branch/:/_ }}" >> $GITHUB_ENV
          echo "RELEASE_TAG_SHORT=${{ inputs.releases_branch#*: }}" >> $GITHUB_ENV
          echo "RELEASE_BASE=${{ inputs.releases_branch%%:* }}" >> $GITHUB_ENV

      - name: Build Firmware
        if: ${{ inputs.rootfs_url == '' }}
        env:
          OPENWRT_KERNEL: ${{ inputs.openwrt_kernel }}
        run: |
          echo "::group::Menjalankan ImageBuilder..."
          chmod +x ${IMAGEBUILDER_SCRIPT}
          bash ${IMAGEBUILDER_SCRIPT} ${{ inputs.releases_branch }} "${{ env.TARGET_NAME }}" "${{ inputs.tunnel_option }}"
          echo "::endgroup::"

      - name: Download & Inject Rootfs
        if: ${{ inputs.rootfs_url != '' }}
        run: |
          mkdir -p build
          echo "::group::Mengunduh dan Mengekstrak Rootfs..."
          if echo "${{ inputs.rootfs_url }}" | grep -q "drive.google.com"; then
            echo "Mendeteksi sumber: Google Drive"
            gdown "${{ inputs.rootfs_url }}" -O build/file.${{ inputs.type_file }}
          elif echo "${{ inputs.rootfs_url }}" | grep -q "mediafire.com"; then
            echo "Mendeteksi sumber: MediaFire"
            mediafire-dl "${{ inputs.rootfs_url }}" -o build/file.${{ inputs.type_file }}
          elif echo "${{ inputs.rootfs_url }}" | grep -q "mega.nz"; then
            echo "Mendeteksi sumber: MEGA.nz"
            mega-get "${{ inputs.rootfs_url }}"
            mv * build/file.${{ inputs.type_file }}
          else
            echo "Mendeteksi sumber: URL langsung"
            wget --no-check-certificate "${{ inputs.rootfs_url }}" -O build/file.${{ inputs.type_file }}
          fi
          echo "::endgroup::"
          
          echo "::group::Ekstraksi & Injeksi..."
          mkdir -p imagebuilder/bin/targets/amlogic/${{ env.OPENWRT_BOARD }}
          
          case "${{ inputs.type_file }}" in
            img.gz|img.xz)
              if [[ "${{ inputs.type_file }}" == "img.gz" ]]; then gunzip build/file.img.gz; else unxz build/file.img.xz; fi
              los=$(sudo losetup -fP --show build/file.img)
              mkdir -p rootfs
              sudo mount ${los}p2 rootfs
              [ -d files ] && sudo cp -a files/* rootfs/ || true
              (cd rootfs && sudo tar cfz ../imagebuilder/bin/targets/amlogic/${{ env.OPENWRT_BOARD }}/openwrt-${{ env.OPENWRT_BOARD }}-external-rootfs.tar.gz .)
              sudo umount rootfs
              sudo losetup -d $los
              ;;
            tar.gz)
              mkdir -p rootfs
              tar -xzf build/file.tar.gz -C rootfs
              [ -d files ] && cp -a files/* rootfs/ || true
              (cd rootfs && tar cfz imagebuilder/bin/targets/amlogic/${{ env.OPENWRT_BOARD }}/openwrt-${{ env.OPENWRT_BOARD }}-external-rootfs.tar.gz .)
              ;;
            *)
              echo "Jenis file tidak dikenal." ; exit 1 ;;
          esac
          echo "::endgroup::"

      - name: Prepare Files
        run: |
          cd imagebuilder
          shopt -s nullglob
          echo "::group::Menyiapkan dan Mengganti Nama File..."
          mkdir -p compiled_images/mod
          
          if [[ "${{ env.TARGET_NAME }}" == "amlogic" ]]; then
            for file in bin/targets/*/*/*rootfs.tar.gz; do
              if [ -f "$file" ]; then
                base="$(basename "$file" -rootfs.tar.gz | sed 's/^openwrt/HOUJIE-WRT/')"
                new_name="${base}_${{ env.TUNNEL_OPTION }}-rootfs.tar.gz"
                mv "$file" compiled_images/$new_name
              fi
            done
          else
            for file in bin/targets/*/*/*.img.gz; do
              if [ -f "$file" ]; then
                base="$(basename "$file" .img.gz | sed 's/^openwrt/HOUJIE-WRT/')"
                new_name="${base}_${{ env.TUNNEL_OPTION }}.img.gz"
                mv "$file" compiled_images/$new_name
              fi
            done
          fi
          echo "::endgroup::"

      - name: Packaging OpenWrt For Amlogic
        if: ${{ env.TARGET_NAME == 'amlogic' }}
        run: |
          echo "::group::Cloning dan Repacking Amlogic..."
          cd imagebuilder
          git clone --depth 1 https://github.com/tes-rep/amlogic-s9xxx-openwrt.git ophub_builder
          mkdir -p ophub_builder/openwrt-armsr
          cp -f compiled_images/*rootfs.tar.gz ophub_builder/openwrt-armsr/
          cd ophub_builder
          sudo ./remake -b ${{ env.OPENWRT_BOARD }} -k ${{ inputs.openwrt_kernel }} -s ${{ inputs.rootfs_size }}
          cp -f openwrt/out/*.img.gz ../compiled_images
          echo "::endgroup::"
      
      - name: Renaming & Cleanup
        run: |
          cd imagebuilder
          echo "::group::Pembersihan & Penamaan Ulang..."
          find . -mindepth 1 -maxdepth 1 ! -name 'compiled_images' -exec rm -rf {} +
          
          # Map target names for release
          declare -A name_map=(
              ["rpi-3"]="Raspberry-Pi-3"
              ["rpi-4"]="Raspberry-Pi-4"
              ["friendlyarm_nanopi-r2c"]="NanoPi_R2C"
              ["friendlyarm_nanopi-r2s"]="NanoPi_R2S"
              ["friendlyarm_nanopi-r4s"]="NanoPi_R4S"
              ["xunlong_orangepi-r1-plus"]="Orange-Pi-R1-Plus"
              ["xunlong_orangepi-r1-plus-lts"]="Orange-Pi-R1-Plus-LTS"
              ["generic"]="x86-64_Generic"
              ["amlogic"]="Amlogic"
          )
          
          for file in compiled_images/*.img.gz; do
              if [ -f "$file" ]; then
                  base_name=$(basename "$file")
                  new_name="HOUJIE-WRT_$(echo "$base_name" | cut -d'_' -f2,3)_${name_map["${{ env.TARGET_NAME }}"]}_${{ env.TUNNEL_OPTION }}.img.gz"
                  mv "$file" "compiled_images/mod/$new_name"
              fi
          done
          
          for file in compiled_images/*-rootfs.tar.gz; do
              if [ -f "$file" ]; then
                  base_name=$(basename "$file")
                  new_name="HOUJIE-WRT_$(echo "$base_name" | cut -d'_' -f2,3)_${name_map["${{ env.TARGET_NAME }}"]}_${{ env.TUNNEL_OPTION }}-rootfs.tar.gz"
                  mv "$file" "compiled_images/mod/$new_name"
              fi
          done
          
          echo "::endgroup::"

      - name: List compiled images
        run: |
          echo "📂 Files in compiled_images/mod/"
          ls -lh imagebuilder/compiled_images/mod || true

      - name: Upload the packaged OpenWrt
        uses: ncipollo/release-action@v1
        if: success()
        with:
          tag: HOUJIE-Wrt_${{ env.RELEASE_BASE }}_${{ env.BUILD_TARGET }}
          artifacts: |
            imagebuilder/compiled_images/mod/*.img.gz
            imagebuilder/compiled_images/*.tar.gz
          allowUpdates: true
          removeArtifacts: false
          replacesArtifacts: true
          prerelease: ${{ inputs.upload-prerelease }}
          token: ${{ secrets.GITHUB_TOKEN }}
          body: |
            ### OpenWrt Image information
            - Default IP: 192.168.1.1
            - Default username: root
            - Default password: sijitekowolu
            - Default WIFI name: NOKIA N73 | NOKIA N73_5G
            - Default WIFI password: sijitekowolu
            ### Firmware Details
            - Tanggal Build: ${{ env.BUILD_DATE }}
            - Devices type : ${{ inputs.target }}
            - Kernel version : ${{ inputs.openwrt_kernel }}
            - ROOTFS File : ${{ inputs.releases_branch }}
            - ROOTFS Size : ${{ inputs.rootfs_size }}
            - Tunnel : ${{ inputs.tunnel_option }}
      
      - name: Notify Success Build
        if: success()
        run: |
          DATE=$(date +"%Y-%m-%d %H:%M:%S")
          MESSAGE="✅ Build firmware selesai!
          ═══════════════════════
          🇲🇨 dev     : **houjie80**
          📦 Target   : **${{ matrix.target }}**
          🌐 Release  : **${{ inputs.releases_branch }}**
          🖥 Kernel   : **${{ inputs.openwrt_kernel }}**
          ⏰ Tanggal  : **$DATE**
          🔗 Unduh    : <a href=\"${DOWNLOAD_URL}\">Klik di sini</a>"
          
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
          -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
          -d parse_mode="HTML" \
          --data-urlencode text="$MESSAGE"

      - name: Notify Failure Build
        if: failure()
        run: |
          DATE=$(date +"%Y-%m-%d %H:%M:%S")
          MESSAGE="❌ Build firmware gagal!
          ═══════════════════════
          🇲🇨 dev     : **houjie80**
          📦 Target   : **${{ matrix.target }}**
          🌐 Release  : **${{ inputs.releases_branch }}**
          🖥 Kernel   : **${{ inputs.openwrt_kernel }}**
          ⏰ Tanggal  : **$DATE**
          🔗 Unduh    : <a href=\"${DOWNLOAD_URL}\">Klik di sini</a>"
          
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
          -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
          -d parse_mode="HTML" \
          --data-urlencode text="$MESSAGE"
