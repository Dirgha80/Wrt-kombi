# =============================================================================
# https://github.com/ophub/amlogic-s9xxx-openwrt
# Description:   Build OpenWrt with Image Builder
# Instructions:  https://openwrt.org/docs/guide-user/additional-software/imagebuilder
# Download from: https://downloads.openwrt.org/releases
#                https://downloads.immortalwrt.org/releases
# =============================================================================

name: Build sdcard+++

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      releases_branch:
        description: "Select the releases branch"
        required: false
        default: "openwrt:24.10.2"
        type: choice
        options:
          - immortalwrt:24.10.1
          - immortalwrt:24.10.2
          - immortalwrt:23.05.4
          - openwrt:24.10.2
          - openwrt:24.10.1
          - openwrt:23.05.5
          - openwrt:23.05.6
      
      target:
        description: "Select device Target"
        required: true
        default: "AT01"
        type: choice
        options:
          - all
          - Raspberry Pi 3B
          - Raspberry Pi 4B
          - NanoPi R2C
          - NanoPi R2S
          - NanoPi R4S
          - Orange Pi R1 Plus
          - Orange Pi R1 Plus LTS
          - x86-64
          - HG680P
          - B860H-V5
          - B860H-V1-V2
          - AT01
          - HG680-FJ
          - AT01_HG680P
      
      rootfs_size:
        description: "ROOTFS Size, (512, 640, 756, 1024)"
        required: true
        default: "1024"
      
      openwrt_kernel:
        description: "Select kernel version"
        required: false
        default: "6.6.y_6.12.y"
        type: choice
        options:
          - 5.4.y
          - 5.10.y
          - 5.15.y
          - 6.1.y
          - 6.6.y
          - 6.12.y
          - 6.1.y_6.6.y
          - 5.15.y_5.10.y
          - 6.6.y_6.12.y
      
      kernel_usage:
        description: "Set the tags of the stable kernel."
        required: false
        default: "stable"
        type: choice
        options:
          - stable
          - flippy
          - dev
          - s905x4
      
      upload-prerelease:
        description: "Upload as pre-release"
        required: false
        default: "false"
        type: boolean
      
      fwinfo:
        description: 'Firmware Information'
        required: false
        default: "imagebuilderB.sh"
        type: choice
        options:
          - imagebuilder.sh
          - imagebuilderA.sh
          - imagebuilderB.sh
          - imagebuilderC.sh
          - imagebuilderD.sh
      
      rootfs_url:
        description: "Optional: Download ROOTFS archive from URL"
        required: false
        default: ""
      
      type_file:
        description: "Select type file"
        required: false
        default: "img.gz"
        type: choice
        options:
          - img.xz
          - img.gz
          - tar.gz
      
      tunnel_option:
        description: "Select tunnel packages to include"
        required: false
        default: "openclash"
        type: choice
        options:
          - ""
          - openclash
          - passwall
          - nikki
          - openclash-passwall
          - nikki-passwall
          - nikki-openclash
          - all-tunnel
    
env:
  TZ: Asia/Jakarta
  IMAGEBUILDER_SH: ${{ inputs.fwinfo }}
  TUNNEL_OPTION: ${{ inputs.tunnel_option }}
  WORKING_DIR: imagebuilder
  DOWNLOAD_URL: "https://tes-rep.github.io/Server-repo/"  # Ganti dengan URL release repo kamu

jobs:
  prebuild:
    runs-on: ubuntu-latest
    name: ${{ inputs.releases_branch }}
    outputs:
      target: ${{ steps.set-matrix.outputs.target }}
    
    steps:
      - name: Set Matrix Run
        id: set-matrix
        run: |
          case "${{ inputs.target }}" in
            "all")
              echo "target=['Raspberry Pi 3B','Raspberry Pi 4B','NanoPi R2C','NanoPi R2S','NanoPi R4S','Orange Pi R1 Plus','Orange Pi R1 Plus LTS','x86-64','HG680P','B860H-V5','AT01','B860H-V1-V2']" >> $GITHUB_OUTPUT
              ;;
            "AT01_HG680P")
              echo "target=['AT01','HG680P']" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "target=['${{ inputs.target }}']" >> $GITHUB_OUTPUT
              ;;
          esac

  build:
    needs: prebuild
    runs-on: ubuntu-24.04
    if: ${{ github.event.repository.owner.id }} == ${{ github.event.sender.id }}
    name: "${{ matrix.target }}"
    strategy:
      fail-fast: false
      matrix:
        target: ${{ fromJSON(needs.prebuild.outputs.target) }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Notify the start of the build process via Telegram
      - name: Notify Start Build
        run: |
          DATE=$(date +"%Y-%m-%d %H:%M:%S")
          MESSAGE="🚀 Build firmware hj-Wrt dimulai...
          ═══════════════════════
          🇲🇨 dev      : <b>houjie80</b>
          📦 Target   : <b>${{ inputs.target }}</b>
          🌐 Release  : <b>${{ inputs.releases_branch }}</b>
          🖥 Kernel   : <b>${{ inputs.openwrt_kernel }}</b>
          ⏰ Tanggal  : <b>$DATE</b>"
          
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
          -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
          -d parse_mode="HTML" \
          --data-urlencode text="$MESSAGE"

      # Initialize the build environment
      - name: Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo apt-get -qq update
          sudo apt-get -qq install build-essential libncurses5-dev libncursesw5-dev zlib1g-dev gawk git gettext libssl-dev xsltproc rsync wget unzip tar gzip qemu-utils mkisofs
          sudo apt-get -qq install jq python3 python3-pip
          #sudo -E apt-get -y install $(curl -fsSL https://tinyurl.com/ubuntu2204-make-openwrt)
          # sudo -E systemctl daemon-reload
          sudo timedatectl set-timezone "$TZ"
          sudo pip3 install gdown
          sudo pip3 install git+https://github.com/Juvenal-Yescas/mediafire-dl
          wget https://mega.nz/linux/repo/xUbuntu_24.04/amd64/megacmd-xUbuntu_24.04_amd64.deb && sudo apt install "$PWD/megacmd-xUbuntu_24.04_amd64.deb"
          echo "TARGET=${{ matrix.target }}" >> $GITHUB_ENV
          echo -e "[\033[94m INFO \033[0m] TARGET: ${{ matrix.target }}"
          echo "BUILD_DATE=$(date +'%d-%m-%y %H:%M:%S')" >> $GITHUB_ENV
          echo "DATE=$(date +'%Y%m%d')" >> $GITHUB_ENV

      # Setup environment variables based on the selected target
      - name: Setup Environment Variables
        id: init
        run: |
          case "$TARGET" in
            "Raspberry Pi 3B")
              echo "TARGET_NAME=rpi-3" >> $GITHUB_ENV
              echo "TAG_NAME=openwrt_rpi-3" >> $GITHUB_ENV
              ;;
            "Raspberry Pi 4B")
              echo "TARGET_NAME=rpi-4" >> $GITHUB_ENV
              echo "TAG_NAME=openwrt_rpi-4" >> $GITHUB_ENV
              ;;
            "NanoPi R2C")
              echo "TARGET_NAME=friendlyarm_nanopi-r2c" >> $GITHUB_ENV
              echo "TAG_NAME=openwrt_friendlyarm_nanopi-r2c" >> $GITHUB_ENV
              ;;
            "NanoPi R2S")
              echo "TARGET_NAME=friendlyarm_nanopi-r2s" >> $GITHUB_ENV
              echo "TAG_NAME=openwrt_friendlyarm_nanopi-r2s" >> $GITHUB_ENV
              ;;
            "NanoPi R4S")
              echo "TARGET_NAME=friendlyarm_nanopi-r4s" >> $GITHUB_ENV
              echo "TAG_NAME=openwrt_friendlyarm_nanopi-r4s" >> $GITHUB_ENV
              ;;
            "Orange Pi R1 Plus")
              echo "TARGET_NAME=xunlong_orangepi-r1-plus" >> $GITHUB_ENV
              echo "TAG_NAME=openwrt_xunlong_orangepi-r1-plus" >> $GITHUB_ENV
              ;;
            "Orange Pi R1 Plus LTS")
              echo "TARGET_NAME=xunlong_orangepi-r1-plus-lts" >> $GITHUB_ENV
              echo "TAG_NAME=openwrt_xunlong_orangepi-r1-plus-lts" >> $GITHUB_ENV
              ;;
            "x86-64")
              echo "TARGET_NAME=generic" >> $GITHUB_ENV
              echo "TAG_NAME=openwrt_generic" >> $GITHUB_ENV
              ;;
            "HG680P")
              echo "TARGET_NAME=amlogic" >> $GITHUB_ENV
              echo "openwrt_board=s905x" >> $GITHUB_ENV
              echo "TAG_NAME=openwrt_amlogic_s905x" >> $GITHUB_ENV
              ;;
            "B860H-V5")
              echo "TARGET_NAME=amlogic" >> $GITHUB_ENV
              echo "openwrt_board=s905x2-b860h-v5" >> $GITHUB_ENV
              echo "TAG_NAME=openwrt_amlogic_s905x-b860h" >> $GITHUB_ENV
              ;;
            "B860H-V1-V2")
              echo "TARGET_NAME=amlogic" >> $GITHUB_ENV
              echo "openwrt_board=s905x2" >> $GITHUB_ENV
              echo "TAG_NAME=openwrt_amlogic_s905x2" >> $GITHUB_ENV
              ;;
            "AT01")
              echo "TARGET_NAME=amlogic" >> $GITHUB_ENV
              echo "openwrt_board=s905x4-advan" >> $GITHUB_ENV
              echo "TAG_NAME=openwrt_amlogic_s905x4" >> $GITHUB_ENV
              ;;
            "HG680-FJ")
              echo "TARGET_NAME=amlogic" >> $GITHUB_ENV
              echo "openwrt_board=s905x2-hg680-fj" >> $GITHUB_ENV
              echo "TAG_NAME=openwrt_amlogic_s905x2-hg680-fj" >> $GITHUB_ENV
              ;;
            *)
              echo "Unknown TARGET: $TARGET"
              exit 1
              ;;
          esac
          echo "status=success" >> ${GITHUB_OUTPUT}
          echo -e "[\033[92m SUCCESS \033[0m] Status: Success"
          
      # Set additional environment variables for the build
      - name: Set ENV (VEROP & ARCH_3)
        run: |
          RELEASES_BRANCH="${{ inputs.releases_branch }}"
          RELEASES_TAG="${RELEASES_BRANCH/:/_}"
          RELEASES_TAG2="${RELEASES_BRANCH#*:}"
          VEROP="$(echo "${RELEASES_TAG2}" | awk -F. '{print $1"."$2}')"
          
          case "${{ env.TARGET_NAME }}" in
            rpi-3|rpi-4) ARCH_3="aarch64_cortex-a72" ;;
            generic)     ARCH_3="x86_64" ;;
            amlogic)     ARCH_3="aarch64_generic" ;;
            *)           ARCH_3="arm_cortex-a7" ;;
          esac
          
          echo "VEROP=$VEROP" >> $GITHUB_ENV
          echo "ARCH_3=$ARCH_3" >> $GITHUB_ENV
          echo "RELEASES_TAG=$RELEASES_TAG" >> $GITHUB_ENV
          echo "RELEASES_TAG2=$RELEASES_TAG2" >> $GITHUB_ENV   

      - name: Download Custom Packages
        run: |
          chmod +x scripts/PACKAGES.sh
          ./scripts/PACKAGES.sh

      # Build the ROOTFS using Image Builder if no URL is provided
      - name: Build Rootfs [ ${{ inputs.releases_branch }} ]
        id: imagebuilder
        if: ${{ steps.init.outputs.status == 'success' && inputs.rootfs_url == '' && !cancelled() }}
        run: |
          echo -e "[\033[95m STEPS \033[0m] Building Firmware And Rootfs"
          export OPENWRT_KERNEL="${{ inputs.openwrt_kernel }}"
          chmod +x ${{ env.IMAGEBUILDER_SH }}
          bash ${{ env.IMAGEBUILDER_SH }} ${{ inputs.releases_branch }} "${{ env.TARGET_NAME }}" "${{ inputs.tunnel_option }}"
          echo "status=success" >> ${GITHUB_OUTPUT}
          echo -e "[\033[92m SUCCESS \033[0m] Status: Success"
          
      # Download ROOTFS from a provided URL
      - name: Download file ${{ github.event.inputs.type_file }}
        if: ${{ inputs.rootfs_url != '' }}
        run: |
          mkdir -p build
          echo "[🔍] Mendeteksi sumber dari: ${{ github.event.inputs.rootfs_url }}"
          
          if echo "${{ github.event.inputs.rootfs_url }}" | grep -q "drive."; then
            echo "[🌐] Sumber: Google Drive"
            LINK_GDRIVE=$(echo "${{ github.event.inputs.rootfs_url }}" | sed -nE 's/.*(id=|d\/)([a-zA-Z0-9_-]+).*/\2/p')
            echo "[⬇️] Mengunduh dari Google Drive: ID $LINK_GDRIVE"
            sudo gdown "$LINK_GDRIVE" -O build/file.${{ github.event.inputs.type_file }}
          elif echo "${{ github.event.inputs.rootfs_url }}" | grep -q "mediafire.com"; then
            echo "[🌐] Sumber: MediaFire"
            echo "[⬇️] Mengunduh dari MediaFire: ${{ github.event.inputs.rootfs_url }}"
            sudo mediafire-dl "${{ github.event.inputs.rootfs_url }}" -o build/file.${{ github.event.inputs.type_file }}
          elif echo "${{ github.event.inputs.rootfs_url }}" | grep -q "mega.nz"; then
            echo "[🌐] Sumber: MEGA.nz"
            echo "[⬇️] Mengunduh dari MEGA: ${{ github.event.inputs.rootfs_url }}"
            FILE_MEGA=$(sudo mega-get "${{ github.event.inputs.rootfs_url }}" | awk -F: '{print $2}')
            sudo mv "${FILE_MEGA}" "build/file.${{ github.event.inputs.type_file }}"
          else
            echo "[🌐] Sumber: URL langsung"
            echo "[⬇️] Mengunduh dari URL: ${{ github.event.inputs.rootfs_url }}"
            sudo wget --no-check-certificate "${{ github.event.inputs.rootfs_url }}" -O build/file.${{ github.event.inputs.type_file }}
          fi
          
          echo "[✅] File berhasil diunduh ke build/file.${{ github.event.inputs.type_file }}"

      # Extract and inject files into the downloaded ROOTFS
      - name: Extract & Inject rootfs
        id: extract
        if: ${{ inputs.rootfs_url != '' }}
        run: |
          set -e
          echo "[🔍] Deteksi file: ${{ inputs.type_file }}"
          mkdir -p imagebuilder/bin/targets/amlogic/${{ env.openwrt_board }}
          cd build
          
          case "${{ inputs.type_file }}" in
            img.gz)
              echo "[🗜] Ekstrak GZIP image..."
              gunzip file.img.gz
              LOS=$(sudo losetup -fP --show file.img)
              sudo mount ${LOS}p2 rootfs
              echo "[🗂] Inject files/ ke rootfs..."
              [ -d ../files ] && sudo cp -a ../files/* rootfs/ || true
              (cd rootfs && sudo tar cfz ../../imagebuilder/bin/targets/amlogic/${{ env.openwrt_board }}/openwrt-${{ env.openwrt_board }}-external-rootfs.tar.gz .)
              sudo umount rootfs
              sudo losetup -d $LOS
              ;;
            img.xz)
              echo "[🗜] Ekstrak XZ image..."
              unxz file.img.xz
              LOS=$(sudo losetup -fP --show file.img)
              sudo mount ${LOS}p2 rootfs
              echo "[🗂] Inject files/ ke rootfs..."
              [ -d ../files ] && sudo cp -a ../files/* rootfs/ || true
              (cd rootfs && sudo tar cfz ../../imagebuilder/bin/targets/amlogic/${{ env.openwrt_board }}/openwrt-${{ env.openwrt_board }}-external-rootfs.tar.gz .)
              sudo umount rootfs
              sudo losetup -d $LOS
              ;;
            tar.gz)
              echo "[📦] Menggunakan file tar.gz langsung..."
              cp file.tar.gz ../rootfs.tar.gz
              mkdir rootfs
              tar -xzf ../rootfs.tar.gz -C rootfs
              echo "[🗂] Inject files/ ke rootfs..."
              [ -d ../files ] && cp -a ../files/* rootfs/ || true
              (cd rootfs && tar cfz ../../imagebuilder/bin/targets/amlogic/${{ env.openwrt_board }}/openwrt-${{ env.openwrt_board }}-external-rootfs.tar.gz .)
              ;;
            *)
              echo "[❌] Jenis file tidak dikenal: ${{ inputs.type_file }}"
              exit 1
              ;;
          esac
          echo "[✅] File rootfs siap di folder imagebuilder/bin/targets/amlogic/${{ env.openwrt_board }}/"
          
      # Clear server space to free up resources
      - name: Clear server space
        if: ${{ steps.imagebuilder.outputs.status }} == 'success' && !cancelled()
        run: |
          cd imagebuilder
          echo "[INFO] Membersihkan direktori imagebuilder (kecuali bin/)"
          find . -mindepth 1 -maxdepth 1 ! -name 'bin' -exec rm -rf {} +
          echo "[✓] Ruang setelah pembersihan:"
          df -hT ${PWD}

      # Repack the OpenWrt image for Amlogic devices
      - name: Packaging OpenWrt For Amlogic
        id: repack
        if: ${{ env.TARGET_NAME }} == 'amlogic'
        run: |
          cd imagebuilder
          echo -e "[\033[95m STEPS \033[0m] Cloning Ophub Repacking Amlogic"
          git clone --depth 1 https://github.com/tes-rep/amlogic-s9xxx-openwrt.git ophub_builder
          mkdir -p ophub_builder/openwrt-armsr
          cp -f compiled_images/*rootfs.tar.gz ophub_builder/openwrt-armsr/
          cd ophub_builder
          sudo ./remake -b ${{ env.openwrt_board }} -k ${{ inputs.openwrt_kernel }} -s ${{ inputs.rootfs_size }}
          for file in openwrt/out/*.img.gz; do cp -f "$file" ../compiled_images; done
          echo "status=success" >> $GITHUB_OUTPUT

      # Rename and prepare files for upload
      - name: Prepare Before Uploads
        id: prepare2
        if: always()
        run: |
          cd imagebuilder
          mkdir -p compiled_images/mod
          shopt -s nullglob
          echo -e "[\033[95m STEPS \033[0m] Prepare File.."
          
          # Renaming logic for Amlogic devices
          if [[ "${{ env.TARGET_NAME }}" == "amlogic" ]]; then
            for file in bin/targets/*/*/*rootfs.tar.gz; do
              if [ -f "$file" ]; then
                base="$(basename "$file" -rootfs.tar.gz | sed 's/^openwrt/HOUJIE-WRT/')"
                new_name="${base}_${{ env.TUNNEL_OPTION }}-rootfs.tar.gz"
                mv "$file" compiled_images/$new_name
              fi
            done
          fi
          
          # Renaming logic for other devices
          for file in bin/targets/*/*/*.img.gz; do
            if [ -f "$file" ]; then
              base="$(basename "$file" .img.gz | sed 's/^openwrt/HOUJIE-WRT/')"
              new_name="${base}_${{ env.TUNNEL_OPTION }}.img.gz"
              mv "$file" compiled_images/$new_name
            fi
          done

          echo -e "INFO files list: \n$(ls -l compiled_images 2>/dev/null)"
          echo -e "INFO files list (compiled_images/mod): \n$(ls -l compiled_images/mod 2>/dev/null)"
          echo "status=success" >> ${GITHUB_OUTPUT}
          echo -e "[\033[92m SUCCESS \033[0m] Status: Success"

      - name: Mod SDCard
        id: modsdcard
        if: always()
        run: |
          chmod +x scripts/MODSDCARD.sh
          ./scripts/MODSDCARD.sh
          echo "status=success" >> $GITHUB_OUTPUT

      - name: List compiled images
        run: |
          echo "📂 Files in imagebuilder/compiled_images/"
          ls -lh imagebuilder/compiled_images || true
          echo
          echo "📂 Files in imagebuilder/compiled_images/mod/"
          ls -lh imagebuilder/compiled_images/mod || true

      # Upload the final firmware images to a GitHub Release
      - name: Upload the packaged OpenWrt
        uses: ncipollo/release-action@main
        if: ${{ steps.modsdcard.outputs.status }} == 'success' && !cancelled()
        with:
          tag: HOUJIE-Wrt_${{ env.BASE }}_${{ env.openwrt_board }}
          artifacts: |
            imagebuilder/compiled_images/*.tar.gz
            imagebuilder/compiled_images/mod/*.img.gz
          allowUpdates: true
          removeArtifacts: false
          replacesArtifacts: true
          prerelease: ${{ inputs.upload-prerelease }}
          token: ${{ secrets.GITHUB_TOKEN }}
          body: |
            ### OpenWrt Image information
            - Default IP: 192.168.1.1
            - Default username: root
            - Default password: sijitekowolu
            - Default WIFI name: NOKIA N73 | NOKIA N73_5G
            - Default WIFI password: sijitekowolu
            ### Firmware Details
              - Tanggal Build: ${{ env.BUILD_DATE }}
              - Devices type : ${{ inputs.target }}
              - Kernel version : ${{ inputs.openwrt_kernel }}
              - Kernel Version (Parsed) : ${{ env.kernel }}
              - ROOTFS File : ${{ inputs.releases_branch }}
              - ROOTFS Size : ${{ inputs.rootfs_size }}
              - tunnel : ${{ inputs.tunnel_option }}
      
      # Dummy build step to show the process
      - name: Dummy Build
        run: |
          echo "Building firmware..."
          sleep 5
          echo "Build selesai"

      # Notify the user on build success via Telegram
      - name: Notify Success Build
        if: success()
        run: |
          DATE=$(date +"%Y-%m-%d %H:%M:%S")
          MESSAGE="✅ Build firmware selesai!
          ═══════════════════════
          🇲🇨 dev      : <b>houjie80</b>
          📦 Target   : <b>${{ inputs.target }}</b>
          🌐 Release  : <b>${{ inputs.releases_branch }}</b>
          🖥 Kernel   : <b>${{ inputs.openwrt_kernel }}</b>
          ⏰ Tanggal  : <b>$DATE</b>
          🔗 Unduh    : <a href=\"${DOWNLOAD_URL}\">Klik di sini</a>"

          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
          -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
          -d parse_mode="HTML" \
          --data-urlencode text="$MESSAGE"

      # Notify the user on build failure via Telegram
      - name: Notify Failure Build
        if: failure()
        run: |
          DATE=$(date +"%Y-%m-%d %H:%M:%S")
          MESSAGE="❌ Build firmware gagal!
          ═══════════════════════
          🇲🇨 dev      : <b>houjie80</b>
          📦 Target   : <b>${{ inputs.target }}</b>
          🌐 Release  : <b>${{ inputs.releases_branch }}</b>
          🖥 Kernel   : <b>${{ inputs.openwrt_kernel }}</b>
          ⏰ Tanggal  : <b>$DATE</b>
          🔗 Unduh    : <a href=\"${DOWNLOAD_URL}\">Klik di sini</a>"

          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
          -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
          -d parse_mode="HTML" \
          --data-urlencode text="$MESSAGE"
