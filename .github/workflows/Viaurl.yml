name: Build via URL

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      releases_branch:
        description: "Select the releases branch"
        required: false
        default: "openwrt:24.10.2"
        type: choice
        options:
          - immortalwrt:24.10.1
          - immortalwrt:23.05.4
          - openwrt:24.10.2
          - openwrt:23.05.5
  
      target:
        description: "Select device Target"
        required: true
        default: "Amlogic AT01"
        type: choice
        options:
          - all
          - Raspberry Pi 3B
          - Raspberry Pi 4B
          - NanoPi R2C
          - NanoPi R2S
          - NanoPi R4S
          - Orange Pi R1 Plus
          - Orange Pi R1 Plus LTS
          - x86-64
          - Amlogic HG680P
          - Amlogic B860H-V5
          - Amlogic B860H-V1-V2
          - Amlogic AT01
          - Amlogic HG680-FJ
          - Amlogic AT01_Amlogic HG680P
      rootfs_size:
        description: "ROOTFS Size, (512, 640, 756, 1024)"
        required: true
        default: "1024"
      openwrt_kernel:
        description: "Select kernel version"
        required: false
        default: "6.6.y_6.12.y"
        type: choice
        options:
          - 5.4.y
          - 5.10.y
          - 5.15.y
          - 6.1.y
          - 6.6.y
          - 6.12.y
          - 6.1.y_6.6.y
          - 5.15.y_5.10.y
          - 6.6.y_6.12.y
      kernel_repo:
        description: "Set the kernel repository"
        required: false
        default: "Houjie80/kernel2"
        type: choice
        options:
          - ophub/kernel
          - Houjie80/kernel2
          - tes-rep/kernel
      kernel_usage:
        description: "Set the tags of the stable kernel."
        required: false
        default: "stable"
        type: choice
        options:
          - stable
          - flippy
          - dev
          - s905x4
      upload-prerelease:
        description: "Upload as pre-release"
        required: false
        default: "false"
        type: boolean
      fwinfo:
        description: 'Firmware Information'
        required: false
        default: "imagebuilderA.sh"
        type: choice
        options:
          - imagebuilder.sh
          - imagebuilderA.sh
          - imagebuilderB.sh
      rootfs_url:    
        description: "Optional: Download ROOTFS archive from URL"
        required: false
        default: ""
    

env:
  TZ: Asia/Jakarta
  IMAGEBUILDER_SH: ${{ inputs.fwinfo }}
  WORKING_DIR: imagebuilder

jobs:
  prebuild:
    runs-on: ubuntu-latest
    name: ${{ inputs.releases_branch }}
    outputs:
      target: ${{ steps.set-matrix.outputs.target }}
    steps:
      - name: Set Matrix Run
        id: set-matrix
        run: |
          if [ "${{ inputs.target }}" == "all" ]; then
            echo "target=['Raspberry Pi 3B','Raspberry Pi 4B','NanoPi R2C','NanoPi R2S','NanoPi R4S','Orange Pi R1 Plus','Orange Pi R1 Plus LTS','x86-64','Amlogic HG680P','Amlogic B860H-V5','Amlogic AT01','Amlogic B860H-V1-V2']" >> $GITHUB_OUTPUT
          elif [ "${{ inputs.target }}" == "Amlogic AT01_Amlogic HG680P" ]; then  
            echo "target=['Amlogic AT01','Amlogic HG680P']" >> $GITHUB_OUTPUT
          else
            echo "target=['${{ inputs.target }}']" >> $GITHUB_OUTPUT
          fi
  build:
    needs: prebuild
    runs-on: ubuntu-24.04
    if: ${{ github.event.repository.owner.id }} == ${{ github.event.sender.id }}
    name: "${{ matrix.target }}"
    strategy:
      fail-fast: false
      matrix:
        target: ${{fromJSON(needs.prebuild.outputs.target)}}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Initialization environment (normal)
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo apt-get -qq update
          sudo apt-get -qq install build-essential libncurses5-dev libncursesw5-dev zlib1g-dev gawk git gettext libssl-dev xsltproc rsync wget unzip tar gzip qemu-utils mkisofs
          sudo apt-get -qq install jq python3 python3-pip
          sudo timedatectl set-timezone "$TZ"
          echo "TARGET=${{ matrix.target }}" >> $GITHUB_ENV
          echo "DATE=$(date +'%Y%m%d')" >> $GITHUB_ENV

      - name: Setup Environment Variables
        id: init
        run: |
          if [ "$TARGET" == "Raspberry Pi 3B" ]; then
            echo "TARGET_NAME=rpi-3" >> $GITHUB_ENV
            echo "TAG_NAME=openwrt_rpi-3" >> $GITHUB_ENV
          elif [ "$TARGET" == "Raspberry Pi 4B" ]; then
            echo "TARGET_NAME=rpi-4" >> $GITHUB_ENV
            echo "TAG_NAME=openwrt_rpi-4" >> $GITHUB_ENV
          # Add other device targets...
          fi

      - name: Build Rootfs [ ${{ inputs.releases_branch }} ]
        id: imagebuilder
        if: ${{ steps.init.outputs.status == 'success' && inputs.rootfs_url == '' && !cancelled() }}
        run: |
          echo "[\033[95m STEPS \033[0m] Building Firmware And Rootfs"
          TARGET_NAME="${{ env.TARGET_NAME }}"
          RELEASES_BRANCH="${{ inputs.releases_branch }}"
          RELEASES_TAG="${RELEASES_BRANCH/:/_}"
          RELEASES_TAG2="${RELEASES_BRANCH#*:}"
          export OPENWRT_KERNEL="${{ inputs.openwrt_kernel }}"
          chmod +x ${IMAGEBUILDER_SH}
          bash ${IMAGEBUILDER_SH} ${RELEASES_BRANCH} "${{ env.TARGET_NAME }}"
          echo "RELEASES_TAG=$RELEASES_TAG" >> ${GITHUB_ENV}
          echo "RELEASES_TAG2=$RELEASES_TAG2" >> ${GITHUB_ENV}

      - name: Download external ROOTFS (if provided)
        if: ${{ inputs.rootfs_url != '' }}
        run: |
          echo "[\033[94m INFO \033[0m] Mengunduh rootfs dari: ${{ inputs.rootfs_url }}"
          cd imagebuilder
          mkdir -p compiled_images
          curl -L "${{ inputs.rootfs_url }}" -o compiled_images/external-rootfs.tar.gz
          echo "[✓] Download selesai: $(ls -lh compiled_images)"    

      - name: Prepare file First
        run: |
          cd imagebuilder
          mkdir -p compiled_images/mod
          if [ -f compiled_images/external-rootfs.tar.gz ]; then
            echo "[✓] Menggunakan rootfs dari URL"
          else
            for file in bin/targets/*/*/*rootfs.tar.gz; do mv "$file" compiled_images; done
          fi

      - name: Packaging OpenWrt For Amlogic
        id: repack
        run: |
          cd imagebuilder
          if [[ "${{ env.TARGET_NAME }}" == "amlogic" ]]; then
            git clone --depth 1 https://github.com/tes-rep/amlogic-s9xxx-openwrt.git ophub_builder
            mkdir -p ophub_builder/openwrt-armsr
            cp -f compiled_images/*rootfs.tar.gz ophub_builder/openwrt-armsr/
            cd ophub_builder
            sudo ./remake -b ${{ env.openwrt_board }} -k ${{ inputs.openwrt_kernel }} -s ${{ inputs.rootfs_size }}
          fi

      - name: Prepare Before Uploads
        id: prepare2
        run: |
          cd imagebuilder
          # Additional processing if needed

      - name: Mod SDCard  
        id: modsdcard
        run: |
          chmod +x scripts/MODSDCARD.sh
          ./scripts/MODSDCARD.sh

      - name: Upload the packaged OpenWrt
        uses: ncipollo/release-action@main
        with:
          tag: HOUJIE-Wrt_${{ env.RELEASES_TAG2 }}-${{ github.ref_name }}
          artifacts: imagebuilder/compiled_images/mod/*
          prerelease: ${{ inputs.upload-prerelease }}
          token: ${{ secrets.GITHUB_TOKEN }}
